<Application x:Class="RecipeManager.App"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    StartupUri="MainWindow.xaml">
    <Application.Resources>
        <!-- Define Colors -->
        <Color x:Key="PrimaryColor">#FF00FFFF</Color>
        <!-- Cyan -->
        <Color x:Key="SecondaryColor">#FF800080</Color>
        <!-- Purple -->

        <!-- Define Brush Resources -->
        <SolidColorBrush x:Key="PrimaryBrush" Color="{StaticResource PrimaryColor}"/>
        <SolidColorBrush x:Key="SecondaryBrush" Color="{StaticResource SecondaryColor}"/>
        <SolidColorBrush x:Key="TextBrush" Color="White"/>

        <!-- Define Corner Radius -->
        <CornerRadius x:Key="DefaultCornerRadius">10</CornerRadius>

        <!-- Style for Buttons -->
        <Style TargetType="Button">
            <Setter Property="Background" Value="{StaticResource PrimaryBrush}"/>
            <Setter Property="Foreground" Value="{StaticResource TextBrush}"/>
            <Setter Property="FontWeight" Value="Bold"/>
            <Setter Property="Padding" Value="10,5"/>
            <Setter Property="Margin" Value="5"/>
            <Setter Property="BorderBrush" Value="{StaticResource SecondaryBrush}"/>
            <Setter Property="BorderThickness" Value="1"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="Button">
                        <Border Background="{TemplateBinding Background}"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                CornerRadius="{StaticResource DefaultCornerRadius}">
                            <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center"/>
                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <!-- Style for TextBox -->
        <Style TargetType="TextBox">
            <Setter Property="Background" Value="White"/>
            <Setter Property="Foreground" Value="Black"/>
            <Setter Property="Padding" Value="5"/>
            <Setter Property="Margin" Value="5"/>
            <Setter Property="BorderBrush" Value="{StaticResource PrimaryBrush}"/>
            <Setter Property="BorderThickness" Value="1"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="TextBox">
                        <Border Background="{TemplateBinding Background}"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                CornerRadius="{StaticResource DefaultCornerRadius}">
                            <ScrollViewer x:Name="PART_ContentHost"/>
                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <!-- Style for TextBlock -->
        <Style TargetType="TextBlock">
            <Setter Property="Foreground" Value="{StaticResource SecondaryBrush}"/>
            <Setter Property="FontWeight" Value="Bold"/>
            <Setter Property="Margin" Value="5"/>
        </Style>

        <!-- Style for ListBox -->
        <Style TargetType="ListBox">
            <Setter Property="Background" Value="White"/>
            <Setter Property="Foreground" Value="Black"/>
            <Setter Property="Margin" Value="5"/>
            <Setter Property="BorderBrush" Value="{StaticResource PrimaryBrush}"/>
            <Setter Property="BorderThickness" Value="1"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="ListBox">
                        <Border Background="{TemplateBinding Background}"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                CornerRadius="{StaticResource DefaultCornerRadius}">
                            <ScrollViewer Focusable="false">
                                <ItemsPresenter/>
                            </ScrollViewer>
                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
    </Application.Resources>
</Application>


<Window x:Class="RecipeManager.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:RecipeManager"
        mc:Ignorable="d"
        Title="Recipe Manager" Height="600" Width="800">
    <Grid>
        <TabControl Name="TBCPages" Margin="10">
            <!-- Tab for Adding New Recipe -->
            <TabItem Header="Add Recipe">
                <ScrollViewer VerticalScrollBarVisibility="Auto">
                    <StackPanel Orientation="Vertical" Margin="10">
                        <TextBlock Text="Recipe Name" />
                        <TextBox Name="RecipeName" Width="300" />

                        <TextBlock Text="Ingredients" Margin="10,20,0,0" />
                        <TextBlock Text="Ingredient Name" />
                        <TextBox Name="IngredientName" Width="300" />
                        <TextBlock Text="Quantity" />
                        <TextBox Name="IngredientQuantity" Width="300" />
                        <TextBlock Text="Unit" />
                        <TextBox Name="IngredientUnit" Width="300" />
                        <TextBlock Text="Calories" />
                        <TextBox Name="IngredientCalories" Width="300" />
                        <TextBlock Text="Food Group" />
                        <TextBox Name="IngredientFoodGroup" Width="300" />
                        <Button Name="BtnAddIngredient" Content="Add Ingredient" Width="150" Click="BtnAddIngredient_Click" />

                        <TextBlock Text="Steps" Margin="10,20,0,0" />
                        <TextBlock Text="Step Description" />
                        <TextBox Name="StepDescription" Width="300" />
                        <Button Name="BtnAddStep" Content="Add Step" Width="150" Click="BtnAddStep_Click" />

                        <Button Name="BtnSaveRecipe" Content="Save Recipe" Width="150" Margin="20,20,5,5" Click="BtnSaveRecipe_Click" />
                    </StackPanel>
                </ScrollViewer>
            </TabItem>
            <!-- Tab for Viewing All Recipes -->
            <TabItem Header="View Recipes">
                <StackPanel Orientation="Vertical" Margin="10">
                    <Button Name="BtnDisplayRecipes" Content="Display Recipes" Width="150" Click="BtnDisplayRecipes_Click" />
                    <ListBox Name="RecipeList" Width="500" Height="300" />
                </StackPanel>
            </TabItem>
            <!-- Tab for Displaying a Specific Recipe -->
            <TabItem Header="Display Recipe">
                <StackPanel Orientation="Vertical" Margin="10">
                    <TextBlock Text="Recipe Number" />
                    <TextBox Name="RecipeIndex" Width="300" />
                    <Button Name="BtnDisplayRecipe" Content="Display Recipe" Width="150" Click="BtnDisplayRecipe_Click" />
                    <TextBlock Name="RecipeDetails" Width="500" Height="300" TextWrapping="Wrap" />
                </StackPanel>
            </TabItem>
            <!-- Tab for Filtering Recipes -->
            <TabItem Header="Filter Recipes">
                <StackPanel Orientation="Vertical" Margin="10">
                    <TextBlock Text="Ingredient Name" />
                    <TextBox Name="IngredientFilter" Width="300" />
                    <TextBlock Text="Food Group" />
                    <TextBox Name="FoodGroupFilter" Width="300" />
                    <TextBlock Text="Maximum Calories" />
                    <TextBox Name="CaloriesFilter" Width="300" />
                    <Button Name="BtnFilterRecipes" Content="Filter Recipes" Width="150" Click="BtnFilterRecipes_Click" />
                    <ListBox Name="FilteredRecipeList" Width="500" Height="300" />
                </StackPanel>
            </TabItem>
        </TabControl>
    </Grid>
</Window>

using System.Text;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Navigation;
using System.Windows.Shapes;
using RecipeApp;
using System;
using System.Collections.Generic;
using System.Linq;
using static System.Net.Mime.MediaTypeNames;
using System.Reflection.Metadata;
using System.Reflection.PortableExecutable;
using System.Security.Claims;
using System.Windows.Media.Animation;
using System.Windows.Media.Media3D;
using System.Xml.Linq;
using RecipeManager;




namespace RecipeManager
{
    public partial class MainWindow : Window
    {
        private RecipeApp.RecipeManager recipeManager;
        private Recipe currentRecipe;

        public MainWindow()
        {
            InitializeComponent();
            recipeManager = new RecipeApp.RecipeManager();
            currentRecipe = new RecipeApp.Recipe("");
        }

        private void BtnAddIngredient_Click(object sender, RoutedEventArgs e)
        {
            string name = IngredientName.Text;
            double quantity = double.Parse(IngredientQuantity.Text);
            string unit = IngredientUnit.Text;
            double calories = double.Parse(IngredientCalories.Text);
            string foodGroup = IngredientFoodGroup.Text;

            RecipeApp.Ingredient ingredient = new RecipeApp.Ingredient(name, quantity, unit, calories, foodGroup);
            currentRecipe.AddIngredient(ingredient);

            IngredientName.Text = "";
            IngredientQuantity.Text = "";
            IngredientUnit.Text = "";
            IngredientCalories.Text = "";
            IngredientFoodGroup.Text = "";

            MessageBox.Show("Ingredient added!");
        }

        private void BtnAddStep_Click(object sender, RoutedEventArgs e)
        {
            string description = StepDescription.Text;

            RecipeApp.Step step = new RecipeApp.Step(description);
            currentRecipe.AddStep(step);

            StepDescription.Text = "";

            MessageBox.Show("Step added!");
        }

        private void BtnSaveRecipe_Click(object sender, RoutedEventArgs e)
        {
            currentRecipe.Name = RecipeName.Text;
            recipeManager.AddRecipe(currentRecipe);

            RecipeName.Text = "";

            currentRecipe = new RecipeApp.Recipe("");

            MessageBox.Show("Recipe saved!");
        }

        private void BtnDisplayRecipes_Click(object sender, RoutedEventArgs e)
        {
            RecipeList.Items.Clear();
            foreach (var recipe in recipeManager.GetAllRecipes())
            {
                RecipeList.Items.Add(recipe.Name);
            }
        }

        private void BtnDisplayRecipe_Click(object sender, RoutedEventArgs e)
        {
            if (!int.TryParse(RecipeIndex.Text, out int index) || index < 1 || index > recipeManager.GetAllRecipes().Count)
            {
                RecipeDetails.Text = "Invalid recipe number.";
                return;
            }

            var recipe = recipeManager.GetRecipe(index - 1); // Adjusting for 0-based index in RecipeManager
            if (recipe != null)
            {
                RecipeDetails.Text = $"Recipe: {recipe.Name}\n";
                RecipeDetails.Text += "Ingredients:\n";
                foreach (var ingredient in recipe.Ingredients)
                {
                    RecipeDetails.Text += $"- {ingredient}\n";
                }
                RecipeDetails.Text += "Steps:\n";
                for (int i = 0; i < recipe.Steps.Count; i++)
                {
                    RecipeDetails.Text += $"{i + 1}. {recipe.Steps[i]}\n";
                }
                RecipeDetails.Text += $"Total Calories: {recipe.TotalCalories()}\n";
                if (recipe.TotalCalories() > 300)
                {
                    RecipeDetails.Text += "Warning: Total calories exceed 300!\n";
                }
            }
            else
            {
                RecipeDetails.Text = "Invalid recipe number.";
            }
        }


        private void BtnFilterRecipes_Click(object sender, RoutedEventArgs e)
        {
            var ingredients = IngredientFilter.Text.Split(new char[] { ',' }, StringSplitOptions.RemoveEmptyEntries)
                                                  .Select(i => i.Trim())
                                                  .ToList();
            var foodGroup = FoodGroupFilter.Text;

            var filteredRecipes = recipeManager.FilterRecipes(ingredients, foodGroup);

            FilteredRecipeList.Items.Clear();
            foreach (var recipe in filteredRecipes)
            {
                FilteredRecipeList.Items.Add(recipe.Name);
            }
        }
    }
}


using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;



namespace RecipeApp
{
    // Ingredient class to store ingredient details
    public class Ingredient
    {
        public string Name { get; set; }
        public double Quantity { get; set; }
        public string Unit { get; set; }
        public double Calories { get; set; }
        public string FoodGroup { get; set; }
        private double OriginalQuantity { get; set; }

        public Ingredient(string name, double quantity, string unit, double calories, string foodGroup)
        {
            Name = name;
            Quantity = quantity;
            Unit = unit;
            Calories = calories;
            FoodGroup = foodGroup;
            OriginalQuantity = quantity;
        }

        public void Scale(double factor)
        {
            Quantity = OriginalQuantity * factor;
        }

        public void Reset()
        {
            Quantity = OriginalQuantity;
        }

        public override string ToString()
        {
            return $"{Quantity} {Unit} of {Name} ({Calories} cal, {FoodGroup})";
        }
    }

    // Step class to store each step in the recipe
    public class Step
    {
        public string Description { get; set; }

        public Step(string description)
        {
            Description = description;
        }

        public override string ToString()
        {
            return Description;
        }
    }
    // Recipe class to store recipe details
    public class Recipe
    {
        public string Name { get; set; }
        public List<Ingredient> Ingredients { get; private set; }
        public List<Step> Steps { get; private set; }

        public Recipe(string name)
        {
            Name = name;
            Ingredients = new List<Ingredient>();
            Steps = new List<Step>();
        }

        public void AddIngredient(Ingredient ingredient)
        {
            Ingredients.Add(ingredient);
        }

        public void AddStep(Step step)
        {
            Steps.Add(step);
        }

        public void ScaleRecipe(double factor)
        {
            foreach (var ingredient in Ingredients)
            {
                ingredient.Scale(factor);
            }
        }

        public void ResetRecipe()
        {
            foreach (var ingredient in Ingredients)
            {
                ingredient.Reset();
            }
        }

        public double TotalCalories()
        {
            return Ingredients.Sum(i => i.Calories * (i.Quantity + i.Quantity)); // Assuming this logic is correct for your application
        }

        public void Display()
        {
            Console.WriteLine($"Recipe: {Name}");
            Console.WriteLine("Ingredients:");
            foreach (var ingredient in Ingredients)
            {
                Console.WriteLine($"- {ingredient}");
            }
            Console.WriteLine("Steps:");
            for (int i = 0; i < Steps.Count; i++)
            {
                Console.WriteLine($"{i + 1}. {Steps[i]}");
            }
            double totalCalories = TotalCalories();
            Console.WriteLine($"Total Calories: {totalCalories}");
            if (totalCalories > 300)
            {
                Console.WriteLine("Warning: Total calories exceed 300!");
            }
        }
    }

    // RecipeManager class to handle multiple recipes
    public class RecipeManager
    {
        private List<Recipe> recipes;

        public RecipeManager()
        {
            recipes = new List<Recipe>();
        }

        public void AddRecipe(Recipe recipe)
        {
            recipes.Add(recipe);
            recipes = recipes.OrderBy(r => r.Name).ToList(); // Sort recipes alphabetically by name
        }

        public List<Recipe> GetAllRecipes()
        {
            return recipes;
        }

        public Recipe GetRecipe(int index)
        {
            if (index >= 0 && index < recipes.Count)
            {
                return recipes[index];
            }
            return null;
        }

        public List<Recipe> FilterRecipes(List<string> ingredients, string foodGroup)
        {
            return recipes.Where(r =>
                (ingredients.All(i => r.Ingredients.Any(ing => ing.Name.Equals(i, StringComparison.OrdinalIgnoreCase)))) &&
                (string.IsNullOrEmpty(foodGroup) || r.Ingredients.Any(ing => ing.FoodGroup.Equals(foodGroup, StringComparison.OrdinalIgnoreCase))))
                .ToList();
        }
    }
}





